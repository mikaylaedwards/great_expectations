trigger:
  - develop
  - main

resources:
  containers:
  - container: postgres
    image: postgres:11
    ports:
    - 5432:5432
    env:
      POSTGRES_DB: "test_ci"
      POSTGRES_HOST_AUTH_METHOD: "trust"
  - container: mysql
    image: mysql:8.0.20
    ports:
      - 3306:3306
    env:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: test_ci
  - container: mssql
    image: microsoft/mssql-server-linux
    env:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: ReallyStrongPwd1234%^&*
      MSSQL_DB: test_ci
      MSSQL_PID: Developer
    ports:
      - 1433:1433

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  GE_USAGE_STATISTICS_URL: "https://qa.stats.greatexpectations.io/great_expectations/v1/usage_statistics"

stages:
  - stage: lint
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
      - job: lint
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: 3.7
            displayName: 'Use Python 3.7'

          - script: |
              pip install isort[requirements]==5.4.2 flake8==3.8.3 black==19.10b0 pyupgrade==2.7.2
              EXIT_STATUS=0
              isort . --check-only --skip docs/ || EXIT_STATUS=$?
              black --check --exclude docs/ . || EXIT_STATUS=$?
              flake8 great_expectations/core || EXIT_STATUS=$?
              pyupgrade --py3-plus || EXIT_STATUS=$?
              exit $EXIT_STATUS

  - stage: required
    pool:
      vmImage: 'ubuntu-latest'

    dependsOn: []

    jobs:
      - job: compatibility_matrix
        variables:
          GE_pytest_pip_opts: '--requirement requirements-dev-util.txt --requirement requirements-dev-test.txt'
          GE_pytest_opts: '--no-sqlalchemy --no-spark'
        strategy:
          matrix:
            Python36-Pandas023:
              python.version: '3.6'
              pandas.version: '0.23.4'
            Python37-Pandas025:
              python.version: '3.7'
              pandas.version: '0.25.3'
            Python38-PandasLatest:
              python.version: '3.8'
              pandas.version: 'latest'

        # TODO: refactor steps into a task
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==20.2.4
            displayName: 'Update pip'

          - bash: pip install  pandas
            condition: eq(variables['pandas.version'], 'latest')
            displayName: 'Install pandas latest'

          - bash: pip install  pandas==$(pandas.version)
            condition: ne(variables['pandas.version'], 'latest')
            displayName: 'Install pandas - $(pandas.version)'

          - script: |
              pip install  $(GE_pytest_pip_opts)
              pip install  --requirement requirements.txt
              # Consider fragmenting *all* integration tests into separate folder and run
              pip install  .
            displayName: 'Install dependencies'

          - script: |
              pip install  pytest pytest-cov pytest-azurepipelines
              pytest $(GE_pytest_opts) --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
            displayName: 'pytest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

      - job: comprehensive
        services:
          postgres: postgres

        variables:
          GE_pytest_pip_opts: '--requirement requirements-dev-util.txt --requirement requirements-dev-spark.txt --requirement requirements-dev-sqlalchemy.txt --requirement requirements-dev-test.txt'
          GE_pytest_opts: ''

        strategy:
          matrix:
            Python36:
              python.version: '3.6'
              pandas.version: 'latest'
            Python37:
              python.version: '3.7'
              pandas.version: 'latest'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==20.2.4
            displayName: 'Update pip'

          - script: |
              sudo apt-get install -y pandoc
              pip install pypandoc
            displayName: 'Install pandoc'

          - bash: pip install  pandas
            condition: eq(variables['pandas.version'], 'latest')
            displayName: 'Install pandas latest'

          - bash: pip install  pandas==$(pandas.version)
            condition: ne(variables['pandas.version'], 'latest')
            displayName: 'Install pandas - $(pandas.version)'

          - script: |
              pip install --requirement requirements.txt
              pip install $(GE_pytest_pip_opts)
              pip install  .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-cov pytest-azurepipelines
              pytest $(GE_pytest_opts) --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
            displayName: 'pytest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

  - stage: usage_stats_integration
    pool:
      vmImage: 'ubuntu-latest'

    dependsOn: []

    jobs:
      - job: test_usage_stats_messages

        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==20.2.4
            displayName: 'Update pip'

          - script: |
                pip install --requirement requirements-dev-util.txt --requirement requirements-dev-test.txt
                pip install --requirement requirements.txt
                pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-azurepipelines
              pytest --no-spark --no-sqlalchemy --aws-integration -v tests/integration/usage_statistics
            displayName: 'pytest'

  - stage: db_integration
    pool:
      vmImage: 'ubuntu-latest'

    dependsOn: []

    jobs:
      - job: mysql
        services:
          mysql: mysql

        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==20.2.4
            displayName: 'Update pip'

          - script: |
              printf 'Waiting for MySQL database to accept connections'
              until mysql --host=localhost --protocol=TCP --port=3306 --user=root --password='' --execute "SHOW DATABASES"; do
                printf '.'
                sleep 1;
              done;
            displayName: Wait for database to initialise

          - script: |
              echo "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));" > mysql_setup_script.sql
              mysql --host=localhost --protocol=TCP --port=3306 --user=root --password='' --reconnect < mysql_setup_script.sql
            displayName: 'Configure mysql'

          - script: |
              pip install --requirement requirements.txt
              pip install --requirement requirements-dev-test.txt --requirement requirements-dev-sqlalchemy.txt --requirement requirements-dev-util.txt
              pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install --requirement requirements.txt
              pip install pytest pytest-cov pytest-azurepipelines
              pytest --mysql --no-postgresql --no-spark --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
            displayName: 'pytest'

      - job: mssql
        services:
          mssql: mssql

        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==20.2.4
            displayName: 'Update pip'

          - script: |
              sqlcmd -U sa -P "ReallyStrongPwd1234%^&*" -Q "CREATE DATABASE test_ci;" -o create_db_output.txt

          - script: |
              pip install --requirement requirements.txt
              pip install --requirement requirements-dev-test.txt --requirement requirements-dev-sqlalchemy.txt --requirement requirements-dev-util.txt
              pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-cov pytest-azurepipelines
              pytest --mssql --no-postgresql --no-spark --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
            displayName: 'pytest'

  - stage: deploy
    condition: and(succeeded(), eq(variables.isMain, true))

    pool:
      vmImage: 'ubuntu-latest'

    dependsOn: [required, lint, db_integration, usage_stats_integration]

    jobs:
      - job: deploy
        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==20.2.4
            displayName: 'Update pip'

          - script: |
              pip install twine
              pip install wheel
              echo "Creating tag: $(cat ./great_expectations/deployment_version)"
              git config --global user.email "team@greatexpectations.io"
              git config --global user.name "Great Expectations"
              git tag --annotate $(cat ./great_expectations/deployment_version) -m "$(cat ./great_expectations/deployment_version)" || echo "tag exists, skipping"
            displayName: 'Add new version tag'

          # Build the python distribution from source
          - script: |
              python setup.py sdist
              python setup.py bdist_wheel
            displayName: 'Build distribution'

          - task: TwineAuthenticate@1
            inputs:
              pythonUploadServiceConnection: pypi

          # Use command line script to 'twine upload', use -r to pass the repository name and --config-file to pass the environment variable set by the authenticate task.
          - script: |
              python -m twine upload -r great-expectations --config-file $(PYPIRC_PATH) dist/*
            displayName: 'Upload'
